parameters:
  - name: environment
    type: string
  - name: location
    type: string
  - name: stack
    type: string
  - name: project
    type: string
  - name: tfversion
    type: string
  - name: activity_name
    type: string
  - name: serviceConnection
    type: string
 # - name: run_stage
 #   type: string
  - name: builtFrom
    type: string
  - name: product
    type: string
  - name: state_sub 
    type: string
  - name: additional_tf_var 
    type: string
    default: ""

steps:

  - template: keyvault-read.yaml
    parameters:
      serviceConnection: ${{ parameters.serviceConnection }}
      environment: ${{ parameters.environment }}
      
  - task: TerraformInstaller@0
    displayName: 'Install Terraform ${{ parameters.tfversion }}'
    inputs:
      terraformVersion: ${{ parameters.tfversion }}

  - task: TerraformCLI@0
    displayName: Terraform Init
    inputs:
      command: init
      terraformVersion: ${{ parameters.tfversion }}
      workingDirectory: '$(Pipeline.Workspace)/tfplan-$(Build.BuildId)-${{ parameters.project }}-${{ lower(parameters.environment) }}-${{ parameters.stack }}'
      backendType: azurerm
      backendServiceArm: ${{ parameters.serviceConnection }}
      backendAzureRmResourceGroupName: 'azure-control-${{ parameters.environment }}-rg'
      backendAzureRmResourceGroupLocation: ${{ parameters.location }}
      backendAzureRmStorageAccountName: $(controlStorageAccount)
      backendAzureRmStorageAccountSku: Standard_LRS
      backendAzureRmContainerName: subscription-tfstate
      backendAzureRmKey: '${{ parameters.location }}/${{ parameters.project }}/${{ lower(parameters.environment) }}/${{ parameters.stack }}/terraform.tfstate'
      commandOptions: '-backend-config=subscription_id=${{ parameters.state_sub }}'
 
  - bash: |
      cd '$(Pipeline.Workspace)/tfplan-$(Build.BuildId)-${{ parameters.project }}-${{ lower(parameters.environment) }}-${{ parameters.stack }}'
      ls

  - task: TerraformCLI@0
    displayName: Terraform Apply
    inputs:
      command: apply
      terraformVersion: ${{ parameters.tfversion }}
      workingDirectory: '$(Pipeline.Workspace)/tfplan-$(Build.BuildId)-${{ parameters.project }}-${{ lower(parameters.environment) }}-${{ parameters.stack }}'
      environmentServiceName: ${{ parameters.serviceConnection }}
      commandOptions: '-input=false "tfplan-${{ parameters.project }}-${{ lower(parameters.environment) }}-${{ parameters.stack }}"'
